/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   onboarding-tutorial.html
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../polymer/types/lib/legacy/class.d.ts" />
/// <reference path="../polymer/types/lib/utils/flattened-nodes-observer.d.ts" />
/// <reference path="../neon-animation/neon-animated-pages.d.ts" />
/// <reference path="../neon-animation/neon-animation-runner-behavior.d.ts" />
/// <reference path="../neon-animation/animations/slide-from-right-animation.d.ts" />
/// <reference path="../neon-animation/animations/slide-from-left-animation.d.ts" />
/// <reference path="../neon-animation/animations/slide-left-animation.d.ts" />
/// <reference path="../neon-animation/animations/slide-right-animation.d.ts" />
/// <reference path="../paper-radio-group/paper-radio-group.d.ts" />
/// <reference path="../paper-radio-button/paper-radio-button.d.ts" />
/// <reference path="../paper-button/paper-button.d.ts" />
/// <reference path="../iron-resizable-behavior/iron-resizable-behavior.d.ts" />
/// <reference path="../iron-overlay-behavior/iron-overlay-behavior.d.ts" />
/// <reference path="../iron-flex-layout/iron-flex-layout.d.ts" />

declare namespace ApiElements {

  /**
   * An overlay that displays onboarding tutorial for ARC.
   *
   * ### Styling
   * `<arc-onboarding>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--onboarding-tutorial` | Mixin applied to the element | `{}`
   *
   * `onboarding-page`
   *
   * ## Styling
   *
   * `<onboarding-page>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--onboarding-page` | Mixin applied to this elment | `{}`
   */
  class OnboardingTutorial {

    /**
     * Delay tutorial show after attaching this element to the DOM.
     * Use with combination with `auto`. It will do nothing if auto is not set.
     */
    delay: number|null|undefined;

    /**
     * If true the tutorial will open itself automatically.
     * Use with combination with `delay`.
     */
    auto: Boolean|null;

    /**
     * Number of pages to display
     */
    pages: any[]|null|undefined;

    /**
     * Currently selected tutorial page.
     */
    selectedPage: number|null|undefined;

    /**
     * Computed value, true if the "previous" button is enabled
     */
    readonly previousEnabled: boolean|null|undefined;

    /**
     * Compyted value, true if the tutorial displays last page.
     */
    readonly lastPage: boolean|null|undefined;

    /**
     * Label for the "next" button
     */
    readonly nextLabel: string|null|undefined;

    /**
     * Computed value, true if to show "skip" button
     */
    readonly showSkip: boolean|null|undefined;

    /**
     * True when hide the pagination for tutorial pages.
     */
    readonly noPagination: boolean|null|undefined;

    /**
     * True to render "previous" button
     */
    readonly renderPrev: boolean|null|undefined;

    /**
     * Computed value if local storage is available.
     */
    _hasLocalStoreage: boolean|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;
    _renderOpened(): void;
    _renderClosed(): void;
    _onNeonAnimationFinish(): void;
    _checkTutorialOpen(): void;
    _processNewNodes(nodes: any): void;
    _processRemovedNodes(nodes: any): void;
    _computeNoPagination(pages: any): any;
    _computeRenderPrev(pages: any): any;

    /**
     * Check if tutorial can be opened (wasn't finished already) and opens it.
     */
    openTutorial(): Promise<any>|null;
    _computeShowPrevious(selectedPage: any): any;
    next(): void;
    prev(): void;
    completeTutorial(): void;
    skip(): void;
    _tutorialId(): any;
    _getTutorialState(): any;
    _saveTutorialPassed(): any;

    /**
     * Computes label for the "next" button.
     *
     * @param lastPage Current value for `lastPage` property.
     */
    _computeNextLabel(lastPage: Boolean|null): String|null;

    /**
     * Computes value for the `lastPage` property.
     */
    _computeLastPage(selectedPage: Number|null, pages: Number|null): Boolean|null;

    /**
     * Computes value for `showSkip` value.
     *
     * @param lastPage Current value for `lastPage` property.
     */
    _computeShowSkip(lastPage: Boolean|null): Boolean|null;
  }
}

interface HTMLElementTagNameMap {
  "onboarding-tutorial": ApiElements.OnboardingTutorial;
}
